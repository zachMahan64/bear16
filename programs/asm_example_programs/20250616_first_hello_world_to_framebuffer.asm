.data
fb_data_start:
.byte 0b00010000 0b10111100 0b01111100 0b10111100 0b11111110 0b11111110 0b01111110 0b10000010 0b11111110 0b01111110 0b10000010 0b01000000 0b10000010 0b10000010 0b01111100 0b10111100 0b01111100 0b10111100 0b01111100 0b11111110 0b10000010 0b10000010 0b10000010 0b10000010 0b10000010 0b11111110 0b00000000 0b00000000 0b00000000 0b00000000 0b00000000 0b00000000
.byte 0b00101000 0b11000010 0b10000010 0b11000010 0b10000000 0b10000000 0b10000000 0b10000010 0b00010000 0b00001000 0b10000010 0b01000000 0b11000110 0b11000010 0b10000010 0b11000010 0b10000010 0b11000010 0b10000010 0b00010000 0b10000010 0b10000010 0b10000010 0b01000100 0b10000010 0b00000100 0b00000000 0b00000000 0b00000000 0b00000000 0b00000000 0b00000000
.byte 0b01000100 0b10000010 0b10000000 0b10000010 0b10000000 0b10000000 0b10000000 0b10000010 0b00010000 0b00001000 0b10000100 0b01000000 0b10101010 0b10100010 0b10000010 0b10000010 0b10000010 0b10000010 0b10000000 0b00010000 0b10000010 0b10000010 0b10000010 0b00101000 0b01000100 0b00001000 0b00000000 0b00000000 0b00000000 0b00000000 0b00000000 0b00000000
.byte 0b10000010 0b11111100 0b10000000 0b10000010 0b11111110 0b11111110 0b10001110 0b11111110 0b00010000 0b00001000 0b11111100 0b01000000 0b10010010 0b10010010 0b10000010 0b11000010 0b10000010 0b11000010 0b01111100 0b00010000 0b10000010 0b10000010 0b10010010 0b00010000 0b00101000 0b00010000 0b00000000 0b00000000 0b00000000 0b00000000 0b00000000 0b00000000
.byte 0b11111110 0b10000010 0b10000000 0b10000010 0b10000000 0b10000000 0b10000010 0b10000010 0b00010000 0b00001000 0b10000010 0b01000000 0b10000010 0b10001010 0b10000010 0b10111100 0b10001010 0b10111100 0b00000010 0b00010000 0b10000010 0b01000100 0b10010010 0b00101000 0b00010000 0b00100000 0b00000000 0b00000000 0b00000000 0b00000000 0b00000000 0b00000000
.byte 0b10000010 0b11000010 0b10000010 0b11000010 0b10000000 0b10000000 0b11000010 0b10000010 0b00010000 0b10001000 0b10000010 0b01000000 0b10000010 0b10000110 0b10000010 0b10000000 0b10000100 0b10000100 0b10000010 0b00010000 0b10000010 0b00101000 0b10101010 0b01000100 0b00010000 0b01000000 0b00000000 0b00000000 0b00000000 0b00000000 0b00000000 0b00000000
.byte 0b10000010 0b10111100 0b01111100 0b10111100 0b11111110 0b10000000 0b10111110 0b10000010 0b11111110 0b01110000 0b10000010 0b01111100 0b10000010 0b10000010 0b01111100 0b10000000 0b01111010 0b10000010 0b01111100 0b00010000 0b01111100 0b00010000 0b01000100 0b10000010 0b00010000 0b11111110 0b00000000 0b00000000 0b00000000 0b00000000 0b00000000 0b00000000
.byte 0b00000000 0b00000000 0b00000000 0b00000000 0b00000000 0b00000000 0b00000000 0b00000000 0b00000000 0b00000000 0b00000000 0b00000000 0b00000000 0b00000000 0b00000000 0b00000000 0b00000000 0b00000000 0b00000000 0b00000000 0b00000000 0b00000000 0b00000000 0b00000000 0b00000000 0b00000000 0b00000000 0b00000000 0b00000000 0b00000000 0b00000000 0b00000000

my_str:
    .string " HELLO WORLD"
me_str:
    .string "      MADE BY ZACH MAHAN"
date_str_0:
    .string "      ON JUNE SIXTEENTH"
date_str_1:
    .string "      TWENTY TWENTY FIVE"


.text
.const FB_LOC = 0
.const LINE_SIZE = 256
.const TILE_MAP_SIZE = 256
.const LINE_WIDTH_B = 32
start:
    lea s0, FB_LOC
    romcpy s0, fb_data_start, TILE_MAP_SIZE #print out char tile set
    add s0, s0, LINE_SIZE

    mov a0, 2 # line
    mov a1, 0 # index
    mov a2, my_str
    call blit_strl_rom #blitting a str

    mov a0, 4 # line
    mov a1, 0 # index
    mov a2, me_str
    call blit_strl_rom #blitting a str

    mov a0, 5 # line
    mov a1, 0 # index
    mov a2, date_str_0
    call blit_strl_rom #blitting a str

    mov a0, 6 # line
    mov a1, 0 # index
    mov a2, date_str_1
    call blit_strl_rom #blitting a str

    call inf_loop # stall
    hlt

inf_loop:
    jmp inf_loop
    ret
blit_cl:
    #a0 = line, a1 = index, a2 = desired char
    mult t0, a0, LINE_SIZE # set line
    add t0, t0, a1 # set index
    sub t1, a2, 65 # get char index in rom, also ' ' works essentially by coincidence since that region of ROM is empty
    add t1, t1, fb_data_start
    clr t2 # cnt
    bcl_loop:
        lbrom t3, t1       #load byte from rom in t3
        sb t0, t3          #store byte in t3 into addr @ t0
        add t0, t0, LINE_WIDTH_B     # t0 += 32
        add t1, t1, LINE_WIDTH_B     # t1 += 32
        inc t2             # t2++
        ult bcl_loop, t2, 8 # check cnt
    ret
blit_strl_rom:
    #a0 = line, a1 = index, a2 = char*
    mov t5, a2 # current char ptr
    bstrl_rom_loop:
        lbrom a2, t5 # a2 <- *char
        eq bstrl_ret, a2, 0
        call blit_cl #reuse a0 & a1
        inc a1
        inc t5
        jmp bstrl_rom_loop
    bstrl_ret:
        ret